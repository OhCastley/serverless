"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const LeastPrivilegeWebserviceStack = require("../lib/least-privilege-webservice-stack");
test('DynamoDB Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::DynamoDB::Table", {
        "KeySchema": [
            {
                "AttributeName": "title",
                "KeyType": "HASH"
            },
        ],
        "AttributeDefinitions": [
            {
                "AttributeName": "title",
                "AttributeType": "S"
            }
        ],
        "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
        },
        "TableName": "blogs"
    }));
});
test('Update DynamoDB Lambda Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::Lambda::Function", {
        "Handler": "createBlog.handler",
        "Runtime": "nodejs12.x"
    }));
});
test('Get DynamoDB Lambda Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::Lambda::Function", {
        "Handler": "readBlogs.handler",
        "Runtime": "nodejs12.x"
    }));
});
test('API Gateway Rest API Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ApiGateway::RestApi", {
        "Name": "blogsapi"
    }));
});
test('API Gateway Rest Resource Created', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ApiGateway::Resource", {
        "PathPart": "blogs"
    }));
});
test('API Gateway GET Rest Method Created with IAM Auth', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ApiGateway::Method", {
        "HttpMethod": "GET",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
            "IntegrationHttpMethod": "POST"
        }
    }));
});
test('API Gateway PUT Rest Method Created with IAM Auth', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new LeastPrivilegeWebserviceStack.LeastPrivilegeWebserviceStack(app, 'MyTestStack', {
        identityPoolRef: "identityPoolStack.identityPool.ref"
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::ApiGateway::Method", {
        "HttpMethod": "PUT",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
            "IntegrationHttpMethod": "POST"
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,