"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const dynamodb = require("@aws-cdk/aws-dynamodb");
const apigw = require("@aws-cdk/aws-apigateway");
const iam = require("@aws-cdk/aws-iam");
const aws_iam_1 = require("@aws-cdk/aws-iam");
class LeastPrivilegeWebserviceStack extends cdk.Stack {
    constructor(scope, id, props) {
        var _a, _b, _c, _d, _e;
        super(scope, id, props);
        // ========================================================================================================
        // Resource: AWS DynamoDB Table
        // ========================================================================================================
        this.blogTable = new dynamodb.Table(this, 'Blogs', {
            partitionKey: { name: 'title', type: dynamodb.AttributeType.STRING },
            tableName: 'blogs',
            // The default removal policy is RETAIN, which means that cdk destroy will not attempt to delete
            // the new table, and it will remain in your account until manually deleted. By setting the policy to 
            // DESTROY, cdk destroy will delete the table (even if it has data in it)
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // ========================================================================================================
        //  Resource: AWS Lambda
        // ========================================================================================================
        const createBlogLda = new lambda.Function(this, 'createBlogsHandler', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda-fns'),
            handler: 'createBlog.handler',
            environment: {
                BLOGS_TABLE_NAME: this.blogTable.tableName,
                PRIMARY_KEY: 'itemId'
            }
        });
        this.blogTable.grantReadWriteData(createBlogLda); // Give this lambda read/write privileges
        // Get HITs Function
        const getBlogslda = new lambda.Function(this, 'getBlogsHandler', {
            runtime: lambda.Runtime.NODEJS_12_X,
            code: lambda.Code.fromAsset('lambda-fns'),
            handler: 'readBlogs.handler',
            environment: {
                BLOGS_TABLE_NAME: this.blogTable.tableName,
                PRIMARY_KEY: 'itemId'
            }
        });
        this.blogTable.grantReadData(getBlogslda); // Give this lambda readonly privileges
        // ========================================================================================================
        //  Resource: AWS API Gateway - RestAPI
        // ========================================================================================================
        const restGateway = new apigw.RestApi(this, 'blogsapi');
        const blogsResource = restGateway.root.addResource('blogs');
        // We need to enable cors on this resource to enable us completing the exercise with our client application
        // ** You should remove or re-configure this securely for your end production app.
        blogsResource.addCorsPreflight({
            allowOrigins: ['*'],
            allowMethods: ['OPTIONS', 'GET', 'PUT']
        });
        // Lets create a GET method for the readOnly operation
        this.getBlogsMethod = blogsResource.addMethod('GET', new apigw.LambdaIntegration(getBlogslda), {
            authorizationType: apigw.AuthorizationType.IAM
        });
        // Lets create a PUT method for the update/create operation
        this.putBlogsMethod = blogsResource.addMethod('PUT', new apigw.LambdaIntegration(createBlogLda), {
            authorizationType: apigw.AuthorizationType.IAM
        });
        // ========================================================================================================
        //    Resource: AWS::IAM::Role 
        //        THE USER (READ-ONLY) IAM ROLE
        // ========================================================================================================
        this.userRole = new iam.Role(this, id + 'ReadOnlyRole', {
            assumedBy: new iam.FederatedPrincipal('cognito-identity.amazonaws.com', {
                "StringEquals": { "cognito-identity.amazonaws.com:aud": (_a = props) === null || _a === void 0 ? void 0 : _a.identityPoolRef },
                "ForAnyValue:StringLike": { "cognito-identity.amazonaws.com:amr": "authenticated" },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        (_b = this.userRole.assumeRolePolicy) === null || _b === void 0 ? void 0 : _b.addStatements(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            principals: [new iam.ServicePrincipal('lambda.amazonaws.com')],
            actions: ['sts:AssumeRole'],
        }));
        this.userRole.addToPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            resources: [this.blogTable.tableArn],
            actions: [
                'dynamodb:Scan',
                'dynamodb:Query',
                'dynamodb:Get',
                'logs:CreateLogStream',
                'logs:PutLogEvents',
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*"
            ]
        }));
        this.userRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ['execute-api:Invoke'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [this.getBlogsMethod.methodArn]
        }));
        this.userRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ["mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",],
            effect: aws_iam_1.Effect.ALLOW,
            resources: ['*']
        }));
        // ========================================================================================================
        //    Resource: AWS::IAM::Role 
        //        THE USER(ADMIN) IAM ROLE
        // ========================================================================================================
        this.adminRole = new iam.Role(this, id + 'creatorRole', {
            assumedBy: new iam.FederatedPrincipal('cognito-identity.amazonaws.com', {
                "StringEquals": { "cognito-identity.amazonaws.com:aud": (_c = props) === null || _c === void 0 ? void 0 : _c.identityPoolRef },
                "ForAnyValue:StringLike": { "cognito-identity.amazonaws.com:amr": "authenticated" },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        (_d = this.adminRole.assumeRolePolicy) === null || _d === void 0 ? void 0 : _d.addStatements(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            principals: [new iam.ServicePrincipal('lambda.amazonaws.com')],
            actions: ['sts:AssumeRole'],
        }));
        this.adminRole.addToPolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            resources: [this.blogTable.tableArn],
            actions: [
                'dynamodb:Scan',
                'dynamodb:Query',
                'dynamodb:Get',
                'dynamodb:UpdateItem',
                'logs:CreateLogStream',
                'logs:PutLogEvents'
            ]
        }));
        this.adminRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ['execute-api:Invoke'],
            effect: aws_iam_1.Effect.ALLOW,
            resources: [this.putBlogsMethod.methodArn,
                this.getBlogsMethod.methodArn]
        }));
        this.adminRole.addToPolicy(new aws_iam_1.PolicyStatement({
            actions: ["mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",],
            effect: aws_iam_1.Effect.ALLOW,
            resources: ['*']
        }));
        // Outputs
        new cdk.CfnOutput(this, 'HTTP API Url', {
            value: (_e = restGateway.url, (_e !== null && _e !== void 0 ? _e : 'Something went wrong with the deploy'))
        });
    }
}
exports.LeastPrivilegeWebserviceStack = LeastPrivilegeWebserviceStack;
//# sourceMappingURL=data:application/json;base64,